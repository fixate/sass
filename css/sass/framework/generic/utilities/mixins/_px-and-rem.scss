// This mixin outputs a property with rem units and a px fallback.
// Values passed without units are used as multipliers for the final
// rem and px values, all other units are output without modification.
// $base-font-size represents the root value of the document font-size
// in pixels.
//
// i.e. html { font-size: 100%;} // -> 16px

// Usage:
// @include px-and-rem([property], [multiplier | explicit value] [, ...]);

// Example 1:
//
// $base-font-size: 16px;
//
// .margin { @include px-and-rem(margin, 2);}
//
// becomes
//
// .margin {
//  margin: 32px;
//  margin: 2rem;
// }

// Example 2:
//
// $base-font-size: 16px;
//
// .padding { @include px-and-rem(padding, 1 2% 1.5em);}
//
// becomes
//
// .padding {
//  padding: 16px 2% 1.5em;
//  padding: 1rem 2% 1.5em;
// }

@function fix8_get_px_and_rem_val($val, $get-rem: true) {
  @if type-of($val) == 'string' {
    @if $val == 'auto' { @return $val;}
    @if $val == '!important' { @return $val;}

    @warn "#{$val} is not a valid value";
  } @else {
    @if unitless($val) {
      @if $val == 0 { @return $val }
      @else {
        @if $get-rem {
          @return $val+rem
        } @else {
          @return $val * $base-font-size;
        }
      }
    } @else { @return $val};
  }
}

@mixin px-and-rem($prop, $vals) {
  $px-list: ();
  $rem-list: ();

  @each $val in $vals {
    $px-list: join($px-list, fix8_get_px_and_rem_val($val, false));
    $rem-list: join($rem-list, fix8_get_px_and_rem_val($val));
  }

  #{$prop}: $px-list;
  #{$prop}: $rem-list;
}

